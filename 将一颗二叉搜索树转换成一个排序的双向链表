void _BSTreeToDList(BSTNode* pRoot, BSTNode** prev)
{
	if (pRoot == NULL)
		return;
	_BSTreeToDList(pRoot->_pLeft, prev);
	pRoot->_pLeft = *prev;
	if (*prev != NULL)
		(*prev)->_pRight = pRoot;
	*prev = pRoot;
	_BSTreeToDList(pRoot->_pRight, prev);
}

BSTNode* BSTreeToDList(BSTNode* pRoot)
{
	BSTNode* pHead = pRoot;
	BSTNode* prev = NULL;
	if (pHead == NULL)
	{
		printf("该树为空\n");
		return;
	}
	while (pHead->_pLeft)
	{
		pHead = pHead->_pLeft;
	}
	_BSTreeToDList(pRoot, &prev);
	return pHead;
}

void InOrder(BSTNode* pRoot)
{
	if (NULL == pRoot)
		return;
	InOrder(pRoot->_pLeft);
	printf("%d ", pRoot->_data);
	InOrder(pRoot->_pRight);
}

void InitBSTree(BSTNode** pRoot)
{
	assert(pRoot);
	*pRoot = NULL;
}

BSTNode* BuyBSTNode(BSDataType data)
{
	BSTNode* newNode = (BSTNode*)malloc(sizeof(BSTNode));
	if (NULL == newNode)
	{
		printf("创建节点失败\n");
		return NULL;
	}
	newNode->_data = data;
	newNode->_pLeft = NULL;
	newNode->_pRight = NULL;
	return newNode;
}

bool InsertBSTree(BSTNode** pRoot, BSDataType data)
{
	assert(pRoot);
	if (*pRoot == NULL)
	{
		(*pRoot) = BuyBSTNode(data);
		return true;
	}
	else
	{
		BSTNode* pCur = (*pRoot);
		BSTNode *pParent = NULL;
		//找到插入结点的位置
		while (pCur)
		{
			pParent = pCur;
			if (pCur->_data == data)//如果当前结点=要插入的结点，则退出，因为这个元素已经存在
			{
				return false;
			}
			else if (pCur->_data > data)//如果当前结点数>要插入的数，向当前结点的左子树去找插入位置
			{
				pCur = pCur->_pLeft;
			}
			else//如果当前结点数<要插入的数，向当前结点的右子树去找插入位置
			{
				pCur = pCur->_pRight;
			}
		}
		//插入新结点
		if (data > pParent->_data)//如果插入的元素比它要插入位置的元素大，则要插入的元素应该是要插入位置结点的右孩子
		{
			pParent->_pRight = BuyBSTNode(data);
			return true;
		}
		if (data < pParent->_data)//如果插入的元素比它要插入位置的元素小，则要插入的元素应该是要插入位置结点的左孩子
		{
			pParent->_pLeft = BuyBSTNode(data);
			return true;
		}
	}
	return false;
}

int main()
{
	BSTNode* pRoot;
  BSTNode* pHead = NULL;
	InitBSTree(&pRoot);
	int i = 0;
	InsertBSTreeNor(&pRoot, 5);
	InsertBSTreeNor(&pRoot, 3);
	InsertBSTreeNor(&pRoot, 4);
	InsertBSTreeNor(&pRoot, 1);
	InsertBSTreeNor(&pRoot, 7);
	InsertBSTreeNor(&pRoot, 8);
	InsertBSTreeNor(&pRoot, 2);
	InsertBSTreeNor(&pRoot, 6);
	InsertBSTreeNor(&pRoot, 0);
	InsertBSTreeNor(&pRoot, 9);
  InOrder(pRoot);
  pHead = BSTreeToDList(pRoot);
	InOrder(pHead);

	return 0;
}
